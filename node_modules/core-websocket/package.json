{
  "name": "core-websocket",
  "version": "0.0.0",
  "dependencies": {
    "express": "",
    "lodash": "^2.4.1",
    "ws": "^0.4.31",
    "polymer-tools": "git://github.com/custom-elements/polymer-tools#master",
    "polymer": "git://github.com/custom-elements/polymer#master"
  },
  "license": "ISC",
  "scripts": {
    "postinstall": "polymer-build src/ build/",
    "test": "polymer-build watch . src/ build/"
  },
  "readme": "#core-websocket\n\nA polymer websocket adapter that provides a declarative way to drop \nreconnecting websockets onto a page.  If multiple URLs are provided, \nthe socket will automatically connect to the fastest and roll through\nthem in the event that a connection is lost.\n\n\n\n\n##Events\n####data\nEmits data as it's retreived, with the detail containing the data received and \nthe source (assuming one was provided in the data request)\n\n####serverChange\nIf servers are changed for any reason this event is fired\n\n\n##Attributes\n####json\nSpecifies whether the adapter will automatically attempt to json serialize/deserialize messages.  Defaults to `true`.\n####urls\nAs urls change, the socket reinitializes with the new target servers.  *In process messages could be lost \nduring the switch to a new set of servers.*\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n##Methods\n####send\nSends the provided message via the websocket.  Optional callback parameter can be provided\nwill be called with the response, or you can listen for the `data` event.  The send call \nreturns a queryId or messageId that will be included in the response assuming the responding server includes it.\n*The callback will only function if this is the case.*\n\n\n\n\n\n\n####handleData\nAs request data is returned, we bubble a data event but also if possible associate it\nwith the proper callback and fire that as well.\n\n\n\n\n\n\n\n##Event Handlers\n\n\n\n\n\n\n\nThis socket is powerful. So powerful that it will try forever to reconnect to\nall the specified servers until you call close. It will not give up. It will not\nrelent.\n\nOK -- so this socket, on send, will roll through all connected sockets, and the\nfirst one that does a successful transport wins. All connected sockets are\npossible sources for incoming messages.\n\nOh -- and this is a *client side* WebSocket, and is set up to work\nwith [Browserify](http://browserify.org/). Client side matters since it initiates\nthe WebSocket connection, so is the only side in a place to reconnect.\n\nIf you explicitly call `close()`, then this socket will really close, otherwise\nit will work to automatically reconnect `onerror` and `onclose` from the\nunderlying WebSocket.\n\n#Events\n##onserver(event)\nThis is fired when the active server changes, this will be after a `send` as\nthat is the only time the socket has activity to 'know' it switched servers.\n\n\n\n\n\n\n\n\n\n\n\nEvent relay. Maybe I should call it *baton* not *evt*. Anyhow, the\n`ReconnectingWebSocket` handles the underlying `WebSocket` so we don't need\nto hookup each time we reopen.\n\n\n\n\n\n\n\n\n\n\n\n\nSend, hunting through every socket until one goes.\n\n\n\nThis is a very simple form of stick preference for the last socket that worked.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nClose all the sockets.\n\n\n\n\n\nEmpty shims for the event handlers. These are just here for discovery via\nthe debugger.\n\n\n\n\n\n\n\nPublish this object for browserify.\n\n\nThis has the exact same API as\n[WebSocket](https://developer.mozilla.org/en-US/docs/Web/API/WebSocket). So\nyou get going with:\n\n```\nReconnectingWebSocket = require(reconnecting-websocket)\nws = new ReconnectingWebSocket('ws://...');\n```\n\n#Events\n##onreconnect(event)\nThis callback is fired when the socket reconnects. This is separated from the\n`onconnect(event)` callback so that you can have different behavior on the\nfirst time connection from subsequent connections.\n##onsend(event)\nFired after a message has gone out the socket.\n##ws\nA reference to the contained WebSocket in case you need to poke under the hood.\n\nThis may work on the client or the server. Because we love you.\n\n\n\n\n\n\n\n\nThe all powerful connect function, sets up events and error handling.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEmpty shims for the event handlers. These are just here for discovery via\nthe debugger.\n\n\n\n\n\n\n\nPublish this object for browserify.\n\n",
  "readmeFilename": "README.md",
  "description": "A polymer websocket adapter that provides a declarative way to drop  reconnecting websockets onto a page.  If multiple URLs are provided,  the socket will automatically connect to the fastest and roll through them in the event that a connection is lost.",
  "_id": "core-websocket@0.0.0",
  "dist": {
    "shasum": "ecca8c684f7882e26e1fd00b98638fb29116aaef"
  },
  "_resolved": "git://github.com/custom-elements/core-websocket.git#5ad4a0204304fe07b7cd2d05c0888a0e0a028190",
  "_from": "core-websocket@git://github.com/custom-elements/core-websocket.git"
}
